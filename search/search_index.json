{"config":{"lang":["ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6982\u8981","text":"<p>\u30a2\u30eb\u30d5\u30a1\u30b9\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3078\u3088\u3046\u3053\u305d\u3002\u30ac\u30a4\u30c9\u3001\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3001API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u3001\u30a2\u30eb\u30d5\u30a1\u30b9\u3067\u306e\u69cb\u7bc9\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"iam/","title":"Identity\u3068Access Management (IAM)","text":""},{"location":"iam/#_1","title":"\u30e6\u30fc\u30b6\u30fc","text":"<p>Alphaus \u304c\u63d0\u4f9b\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u306f\u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc\u3068\u30b5\u30d6\u30e6\u30fc\u30b6\u30fc\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc: \u7ba1\u7406\u8005\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u3042\u308a\u3001\u5168\u3066\u306e\u6a29\u9650\u3092\u6301\u3064\u30a2\u30ab\u30a6\u30f3\u30c8\u3002\u30d7\u30ed\u30c0\u30af\u30c8\u306e\u5229\u7528\u3092\u59cb\u3081\u308b\u969b\u306b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u5f62\u5f0f\u3067\u767b\u9332\u3057\u3066\u3044\u308b\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc\u306b\u3042\u305f\u308a\u307e\u3059\u3002</p> <p>\u30b5\u30d6\u30e6\u30fc\u30b6\u30fc: \u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u30b5\u30d6\u30e6\u30fc\u30b6\u30fc\u306b\u306f\u6700\u5c0f\u9650\u306e\u30a2\u30af\u30bb\u30b9\u304b\u3089\u7279\u5b9a\u306e\u6a29\u9650\u306e\u6307\u5b9a\u3001\u3082\u3057\u304f\u306f\u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc\u3068\u540c\u3058\u304f\u7ba1\u7406\u8005\u6a29\u9650\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"iam/#rbac","title":"RBAC","text":"<p>RBAC\u306fAlphaus \u306e\u30d7\u30ed\u30c0\u30af\u30c8\u5185\u3067\u5229\u7528\u3067\u304d\u308b\u30ed\u30fc\u30eb\u3092\u57fa\u6e96\u3068\u3057\u305f\u30a2\u30af\u30bb\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u3067\u3059\u3002RBAC\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u30e6\u30fc\u30b6\u30fc\u306e\u628a\u63e1\u304c\u53ef\u80fd\u306b\u306a\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u5404\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u3001\u5fc5\u8981\u306a\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u7279\u5b9a\u306e\u6a5f\u80fd\u3084\u30ea\u30bd\u30fc\u30b9\u306b\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>RBAC\u306f\u30e6\u30fc\u30b6\u30fc\u3001\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3001\u30ed\u30fc\u30eb\u3001\u6a29\u9650\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002</p> <p>\u30ed\u30fc\u30eb\u306f\u4f8b\u3068\u3057\u3066<code>Admin</code>\u3001<code>Developers</code>\u306a\u3069\u30011\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3054\u3068\u306b5\u3064\u307e\u3067\u306e\u30ed\u30fc\u30eb\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u30ed\u30fc\u30eb\u3068\u6a29\u9650\u306f\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3054\u3068\u306b\u5206\u96e2\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u969b\u306f\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u3054\u3068\u306b\u8a72\u5f53\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u306b\u7d10\u3065\u304f\u6a29\u9650\u3092\u30a2\u30bf\u30c3\u30c1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc\u306f\u5e38\u306b\u7ba1\u7406\u8005\u6a29\u9650\u3092\u6301\u3061\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u306b\u95a2\u4fc2\u306a\u304f\u5236\u9650\u3092\u53d7\u3051\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30eb\u30fc\u30c8\u30e6\u30fc\u30b6\u30fc\u306b\u3066\u5404\u30b5\u30d6\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3001\u7279\u5b9a\u306e\u30ed\u30fc\u30eb\u3092\u4ed8\u4e0e\u3057\u4f7f\u7528\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"iam/#namespaces","title":"Namespaces","text":"<p>RBAC\u304c\u9069\u7528\u3055\u308c\u308b\u307e\u3068\u307e\u308a\u3092\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3068\u547c\u3073\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30ea\u30b9\u30c8\u304c\u73fe\u5728 RBAC\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3067\u3059\u3002</p> Product/service Namespace Ripple <code>ripple</code> Wave(Pro) <code>wave</code> User management <code>users</code> RBAC management <code>rbac</code>"},{"location":"iam/#_2","title":"\u6a29\u9650","text":"<p>\u6700\u65b0\u306e\u6a29\u9650\u30ea\u30b9\u30c8\u306fGithub\u306e\u30da\u30fc\u30b8\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"blueapi/authentication/","title":"Authentication","text":"<p>Blue uses API client credentials for authentication. You can generate your API credentials either from Ripple under \"Tools &gt; API Access Tokens\", or Wave(Pro) under \"Settings &gt; API Access Tokens\".</p>"},{"location":"blueapi/authentication/#environment-setup","title":"Environment setup","text":"<p>Set the environment variables below if you are using <code>bluectl</code> or any of our supported client libraries.</p> RippleWave(Pro) <pre><code>ALPHAUS_CLIENT_ID={ripple-client-id}\nALPHAUS_CLIENT_SECRET={ripple-client-secret}\n</code></pre> <pre><code>ALPHAUS_CLIENT_ID={wave-client-id}\nALPHAUS_CLIENT_SECRET={wave-client-secret}\nALPHAUS_AUTH_URL=https://login.alphaus.cloud/access_token\n</code></pre> <p>You can validate your setup using <code>bluectl</code>. Run the following command: <pre><code>$ bluectl whoami\n</code></pre></p> <p>If successful, it will output some information about the authenticated user.</p> <p>At the moment, setting both Ripple and Wave(Pro) client credentials is not supported. If both are set, authentication will default to Ripple.</p> <p>If you're using either <code>bluectl</code> or any of our supported client libraries, the authentication flow is as follows. First, it will look for the following environment variables: <pre><code>ALPHAUS_CLIENT_ID\nALPHAUS_CLIENT_SECRET\n</code></pre></p> <p>The <code>ALPHAUS_AUTH_URL</code> environment variable is optional for Ripple. For Wave(Pro) users, this can be set to: <pre><code>ALPHAUS_AUTH_URL=https://login.alphaus.cloud/access_token\n</code></pre></p> <p>In most cases, the environment variables above should be sufficient. If those are not set, it will then look for: <pre><code>ALPHAUS_RIPPLE_CLIENT_ID\nALPHAUS_RIPPLE_CLIENT_SECRET\n</code></pre></p> <p>If those are not set, it will finally look for: <pre><code>ALPHAUS_WAVE_CLIENT_ID\nALPHAUS_WAVE_CLIENT_SECRET\n</code></pre></p>"},{"location":"blueapi/authentication/#calling-http-endpoints-directly","title":"Calling HTTP endpoints directly","text":"<p>If you prefer to call the Blue API HTTP endpoints directly, you can use <code>bluectl</code> to generate the access token. This is useful for APIs that are not yet supported in <code>bluectl</code>. <pre><code># Get access token for production:\n$ bluectl access-token\neyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhd...\n\n# You can use the command above to provide access tokens to your\n# other commands. For example:\n$ curl -H \"Authorization: Bearer $(bluectl access-token)\" \\\n  https://api.alphaus.cloud/m/blue/iam/v1/whoami | jq\n{\n  \"id\":\"test\",\n  \"parent\":\"MSP-xxxxxxx\",\n  \"metadata\":{}\n}\n\n# If you want to access our NEXT (BETA) environment, you can do:\n$ curl -H \"Authorization: Bearer $(bluectl access-token \\\n  --client-id $MY_CLIENT_ID_NEXT \\\n  --client-secret $MY_CLIENT_SECRET_NEXT --beta)\" \\\n  https://apinext.alphaus.cloud/m/blue/iam/v1/whoami | jq\n{\n  \"id\":\"test\",\n  \"parent\":\"MSP-xxxxxxx\",\n  \"metadata\":{}\n}\n</code></pre></p> <p>You can also use <code>bluectl</code> to provide access tokens to our current, non-Blue APIs here. For example: <pre><code>$ curl -H \"Authorization: Bearer $(bluectl access-token)\" \\\n  https://api.alphaus.cloud/m/ripple/user | jq\n{\n  ...\n}\n</code></pre></p>"},{"location":"blueapi/authentication/#access-token-endpoints","title":"Access token endpoints","text":"<p>The following are the endpoints used to acquire product-specific access tokens. You will then use these tokens in your calls to the API using the <code>Authorization: Bearer {token}</code> HTTP header. Access tokens are not compatible between products. Ripple access tokens can only be used for Ripple endpoints; Wave(Pro) access tokens are only valid on Wave(Pro) endpoints.</p> RippleWave(Pro) <pre><code>https://login.alphaus.cloud/ripple/access_token\n</code></pre> <pre><code>https://login.alphaus.cloud/access_token\n</code></pre> <p>To obtain an access token, send a POST message to the access token endpoint using the format described below.</p> <p>Request</p> <pre><code>POST {access-token-url} HTTP1.1\nContent-Type: multipart/form-data\n\n{body formdata}\n</code></pre> Name Value <code>grant_type</code> Valid value(s): <code>password</code>, <code>client_credentials</code> <code>client_id</code> The client id you received from Alphaus or from API. <code>client_secret</code> The client secret you received from Alphaus or from API. <code>username</code> You account username. Required if <code>grant_type</code> is set to <code>password</code>. <code>password</code> You account password. Required if <code>grant_type</code> is set to <code>password</code>. <code>scope</code> Valid value(s): <code>openid</code> <p>Response</p> <pre><code>{\n  \"id_token\": \"eyJ0eXAiOiJKV1Q...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 86400,\n  \"access_token\": \"eyJ0eXAiOiJKV1Q...\",\n  \"refresh_token\": \"def50200...\"\n}\n</code></pre> <p>Example</p> <pre><code>$ curl -X POST \\\n  -F client_id={client-id} \\\n  -F client_secret={client-secret} \\\n  -F grant_type=client_credentials \\\n  -F scope=openid \\\n  https://login.alphaus.cloud/ripple/access_token\n</code></pre>"},{"location":"blueapi/bluectl/","title":"bluectl","text":"<p><code>bluectl</code> is the official command line interface (CLI) for Alphaus services.</p>"},{"location":"blueapi/bluectl/#installation","title":"Installation","text":"<p>You can install <code>bluectl</code> using Homebrew (MacOS, Linux, and Windows through WSL/2). Run the command below in a terminal: <pre><code>$ brew install alphauslabs/tap/bluectl\n</code></pre></p>"},{"location":"blueapi/bluectl/#usage","title":"Usage","text":"<p><code>bluectl</code> uses API client credentials for authentication. You can generate your API credentials either from Ripple under \"Tools &gt; API Access Tokens\", or Wave(Pro) under \"Settings &gt; API Access Tokens\".</p> <p>To validate your credentials with <code>bluectl</code>, run the command below (replace the <code>{client-*}</code> part with your actual client id and client secret values): <pre><code>$ bluectl whoami --client-id {client-id} --client-secret {client-secret}\n</code></pre></p> <p>If successful, it will output some information about the authenticated user.</p> <p>You can also store your credentials as environment variables instead of typing them everytime you run a command. Check out the \"Environment setup\" section here.</p> <p>With environment variables set, you should now be able to run any <code>bluectl</code> commands without the <code>--client-id</code> and <code>--client-secret</code> flags. <pre><code>$ bluectl whoami\n</code></pre></p> <p>Finally, explore other available commands by running: <pre><code># Check out the main commands:\n$ bluectl -h\n\n# More information on a specific subcommand:\n$ bluectl {subcommand} -h\n</code></pre></p>"},{"location":"blueapi/client-sdks/","title":"Client SDKs","text":"<p>We are in the process of generating client libraries (SDKs) for programming languages supported in gRPC. If you have a particular programming language in the list you want supported, contact us at support@alphaus.cloud and we will try to prioritize it.</p>"},{"location":"blueapi/client-sdks/#blue-sdk-go","title":"blue-sdk-go","text":"<p>Check out here for more information.</p>"},{"location":"blueapi/client-sdks/#blue-sdk-python","title":"blue-sdk-python","text":"<p>The Python SDK is now available via <code>pip</code>. Simply do: <pre><code>$ pip install alphausblue\n</code></pre> and the Blue Python SDK, and all its dependencies will be installed. Examples can be found on our GitHub repo.</p> <p>Check out here for more information.</p>"},{"location":"blueapi/overview/","title":"\u6982\u8981","text":"<p>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>https://alphauslabs.github.io/blueapidocs/</p> <p>Blue API allows you to programmatically access our services such as Ripple and Wave(Pro). It uses protocol buffers for service and message definitions, and gRPC for implementation and server/client stub generation. It also uses grpc-gateway for proxying JSON/REST requests to gRPC, and generating OpenAPI documentation. This way, you have the option to use our APIs using either gRPC or JSON/REST, or both.</p> <p>At the moment, Blue API is still a work in progress. Most of the APIs currently supported in Ripple and Wave are still not available. In the meantime, you can still use our JSON/REST APIs here. We plan to upgrade as many of our JSON/REST APIs as possible over to gRPC as it is significantly more efficient in terms of throughput and CPU usage compared to JSON/REST API. However, we don't intend to deprecate our JSON/REST APIs once the transition is completed. You should be able to use both.</p>"},{"location":"blueapi/apis/admin/","title":"Admin API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Admin</p>"},{"location":"blueapi/apis/billing/","title":"Billing API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Billing</p>"},{"location":"blueapi/apis/cost/","title":"Cost API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Cost</p> <p>Cost API allows you to query your vendor-related usage costs and adjustment costs. This is the same data that Ripple/Wave uses to create invoices, graphs, and reports, aggregated at daily level.</p>"},{"location":"blueapi/apis/cost/#cloud-vendor-aws","title":"Cloud vendor: AWS","text":"<p>To use the AWS-specific APIs, you need to first register your AWS management (or billing, or payer) account to Ripple. We will be releasing an API for this registration process in the near future so stay tuned. In the meantime, you can contact us here.</p> <p>Once registered, and the correct permissions are setup, our calculation engines will start downloading your CUR files from your S3 bucket everytime your CUR files are updated by AWS. These checks are done periodically, several times a day. After downloading, calculations will be done based on your billing group settings, whether it will be AWS unblended or Alphaus trueunblended values.</p> <p>Typically, you will download both usage-based costs and fee-based costs from this API to get the whole spending data. To demontrate, let's use the bluectl tool. Here are some example usage scenarios.</p> <p>Download current month's usage costs and save as CSV file: <pre><code># Here, 'all' could mean MSP-level or billing group level.\n$ bluectl awscost get --type all --out /tmp/out.csv\n</code></pre></p> <p>Download current month's adjustment costs and save as CSV file: <pre><code># Here, 'all' could mean MSP-level or billing group level.\n$ bluectl awscost get-adjustments --type all --out /tmp/out.csv\n</code></pre></p> <p>You can also provide the <code>--start yyyymmdd</code> and <code>--end yyyymmdd</code> flags for date ranges.</p> <p>Download current month's usage costs for a specific account and save as CSV file: <pre><code>$ bluectl awscost get --id 1234567890 --type account --out /tmp/out.csv\n</code></pre></p> <p>Download current month's adjustment costs for a specific billing group and save as CSV file: <pre><code># Here, 'bill001' is your billing group id.\n$ bluectl awscost get-adjustments \\\n  --id bill001 \\\n  --type billinggroup \\\n  --out /tmp/out.csv\n</code></pre></p> <p>You can also provide the <code>--include-tags</code> and/or <code>--include-costcategories</code> flag(s) to include the tags and/or cost category information in the streaming data. At the moment, only the usage-based data supports tags and cost categories.</p> <p>Although these APIs are designed to be streamed due to potentially large amounts of data, you can still use the JSON/REST API like so:</p> <pre><code># Output is a newline-delimited rows of JSON data.\n$ curl -X POST -H \"Authorization: Bearer $(bluectl access-token)\" \\\n  https://api.alphaus.cloud/m/blue/cost/v1/aws/costs:read \\\n  -d '{\"accountId\":\"1234567890\"}'\n</code></pre>"},{"location":"blueapi/apis/iam/","title":"IAM API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Iam</p>"},{"location":"blueapi/apis/iam/#group-root-users-wip","title":"Group Root Users [WIP]","text":"<p>You can create a root user account for a given billing group or access group with a given set of Wave or Aqua features. Currently, endpoints for creating, retrieving and deleting a group root user are supported as well as retrieving all the group root users associated with the organization. In addition, all the feature flags for a given group root user can be retrieved and updated.</p>"},{"location":"blueapi/apis/iam/#feature-flags","title":"Feature Flags","text":"<p>In order to enable or disable a feature in Aqua or Wave for a given user, the appropriate feature flag should be either enabled or disabled respectively. The following is a list of such feature flags and which feature they control:</p> Feature Flag Feature Name Action Product dashboard_graph Dashboard View Graph Wave / Wave Pro usage_account Usage Reports Accounts - Access Wave / Wave Pro usage_account_graph Usage Reports Accounts - View Graph Wave / Wave Pro usage_account_menu_account_edit Usage Reports Accounts - Edit Info Wave / Wave Pro usage_account_menu_budget Usage Reports Accounts - View Budget Settings Wave / Wave Pro usage_account_menu_budget_edit Usage Reports Accounts - Edit Budget Settings Wave / Wave Pro usage_account_menu_fees_fee Usage Reports Accounts - View Fees Wave / Wave Pro usage_account_menu_fees_credit Usage Reports Accounts - View Credits Wave / Wave Pro usage_account_menu_fees_refund Usage Reports Accounts - View Refunds Wave / Wave Pro usage_account_menu_fees_other_fees Usage Reports Accounts - View Other Fees Wave / Wave Pro usage_report_download Usage Reports Accounts - Download Reports CSV Wave / Wave Pro usage_group Usage Reports Groups - Access Wave / Wave Pro usage_group_graph Usage Reports Groups - View Graph Wave / Wave Pro usage_tag Usage Reports Tags - Access Wave / Wave Pro usage_tag_graph Usage Reports Tags - View Graph Wave / Wave Pro usage_crosstag Usage Reports Crosstag - Access Wave / Wave Pro usage_crosstag_graph Usage Reports Crosstag - View Graph Wave / Wave Pro ri_purchased Reserved Instances View Purchased RI Wave ri_utilization Reserved Instances View RI Utilization Wave ri_recommendation Recommendations Access Wave sp_purchased Savings Plans Access Wave invoice Others Invoice - Display Link Wave / Wave Pro invoice_download_csv_discount Others Invoice - Download Discounted CSV Wave / Wave Pro invoice_download_csv_merged Others Invoice - Download Merged CSV Wave / Wave Pro open_api Others API Access Tokens Wave / Wave Pro users_management Others Sub-user Management Wave / Wave Pro aq_dashboard Dashboard Access Aqua aq_coverage_ratio Coverage Ratio Access Aqua aq_ri_management Reserved Instances Access Aqua aq_sp_management Savings Plans Access Aqua aq_ri_sp_instances RI &amp; SP Recommendations Access Aqua aq_right_sizing Instance Right-Sizing Access Aqua aq_scheduling Scheduling Access Aqua report_filters Report Filters Access Wave Pro <p>When setting a feature flag, a value of true will enable the feature and a value of false will disable the feature.</p>"},{"location":"blueapi/apis/kvstore/","title":"KvStore API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/KvStore</p> <p>All Alphaus clients have free access to the free-tier version of our KvStore, a highly-available, distributed key/value store that is easily accessible using <code>curl</code>, or <code>bluectl</code>, or using any of the gRPC-supported programming languages. All data are encrypted in transit and at rest so you can use this as a general purpose key/value database even in your production workloads.</p> <p>The free version is limited to a regional store closest to you where data is replicated across three zones. If you want to have access to an unlimited, enterprise-grade version, either regional, multi-region, or even a globally-distributed version (data is replicated across multiple regions across multiple continents), please contact our Sales/Support team.</p>"},{"location":"blueapi/apis/kvstore/#limits","title":"Limits","text":"<ul> <li>Total data size (free tier) - around ~100MB</li> <li>Maximum key size - 7KB</li> <li>Maximum value size - 10MB</li> </ul>"},{"location":"blueapi/apis/kvstore/#examples","title":"Examples","text":"<p>Let's use <code>bluectl</code> to demonstrate how to use KvStore. To write a single key/value: <pre><code># key=hello, value=world\n$ bluectl kv write hello world\n\n# If value has spaces, enclose with double-quotes (\") or single-quotes (')\n$ bluectl kv write space \"this value has spaces\"\n</code></pre></p> <p>To read the key/value: <pre><code># Read key=hello, '--bare' for clean output\n$ bluectl kv read hello --bare\nworld\n</code></pre></p> <p>You can also write file contents as value: <pre><code># Here's a sample file with JSON contents\n$ cat /tmp/test.json\n{\n  \"title\":\"JP text\",\n  \"message\":\"\u65e5\u672c\"\n}\n\n# Write the key/value from file, key=json\n$ bluectl kv write json --from-file=/tmp/test.json\n\n# Let's try reading the \"message\" section using jq\n$ bluectl kv read json --bare | jq -r .message\n\u65e5\u672c\n</code></pre></p> <p>You can also scan multiple keys: <pre><code># Read all keys\n$ bluectl kv scan --outfmt=json\n{\"key\":\"hello\",\"value\":\"world\"}\n{\"key\":\"json\",\"value\":\"{\\n  \\\"title\\\":\\\"JP text\\\",\\n  \\\"message\\\":\\\"\u65e5\u672c\\\"\\n}\"}\n{\"key\":\"space\",\"value\":\"this value has spaces\"}\n\n# Or just some keys using SQL's LIKE operator\n$ bluectl kv scan '%ell%'\nKEY    VALUE \nhello  world\n</code></pre></p>"},{"location":"blueapi/apis/operations/","title":"Operations API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Operations</p>"},{"location":"blueapi/apis/org/","title":"Organization API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Organization</p>"},{"location":"blueapi/apis/preferences/","title":"Preferences API","text":"<p>API Reference</p> <p>https://alphauslabs.github.io/blueapidocs/#/Preferences</p>"},{"location":"blueapi/apis/iam/CreateUser/","title":"CreateUser","text":"<p>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>https://labs.alphaus.cloud/blueapidocs/#/Iam/Iam_CreateUser</p>"},{"location":"blueapi/apis/iam/DeleteUser/","title":"DeleteUser","text":"<p>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>https://labs.alphaus.cloud/blueapidocs/#/Iam/Iam_DeleteUser</p>"},{"location":"blueapi/apis/iam/GetUser/","title":"GetUser","text":"<p>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>https://labs.alphaus.cloud/blueapidocs/#/Iam/Iam_GetUser</p>"},{"location":"blueapi/apis/iam/ListUsers/","title":"ListUsers","text":"<p>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>https://labs.alphaus.cloud/blueapidocs/#/Iam/Iam_ListUsers</p>"},{"location":"blueapi/apis/iam/WhoAmI/","title":"WhoAmI","text":"<p>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</p> <p>https://labs.alphaus.cloud/blueapidocs/#/Iam/Iam_WhoAmI</p>"}]}